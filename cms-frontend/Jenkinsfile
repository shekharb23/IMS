pipeline {
    agent any

    environment {
        dockerHubUsername = 'rohithraj25'
        DOCKER_REPO = "insurance-management"
        dockerImageTag = "${dockerHubUsername}/user-service:latest"
        DOCKER_REGISTRY = "https://index.docker.io/v1/"
        DOCKER_CREDENTIALS_ID = "dockerID"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    git url: 'https://github.com/rohithraj25/working.git'
                    def microservices = [
                        'cms-frontend'
                    ]
                    microservices.each { serviceDir ->
                        echo "Checked out ${serviceDir}"
                    }
                }
            }
        }
        stage('Build NPM Project') {
            steps {
                script {
                    dir('cms-frontend') {
                        echo "Building NPM project cms-frontend"
                        sh 'npm install'
                        sh 'npm run build'
                    }
                }
            }
        }

        stage('Delete Previous Docker Images') {
            steps {
                script {
                    def imageTag = "cms-frontend:${env.BUILD_ID}" // Tagging with build ID
                    echo "Deleting previous Docker images except: ${imageTag}"
                    sh "docker images --format '{{.Repository}}:{{.Tag}}' | grep -v '${imageTag}' | grep 'cms-frontend' | xargs -r docker rmi -f"
                }
            }
        }

        stage('Build frontend Docker Image') {
            steps {
                script {
                    dir('cms-frontend') {
                        def imageTag = "cms-frontend:${env.BUILD_ID}" // Tagging with build ID
                        echo "Building Docker image: ${imageTag}"
                        sh "docker build -t ${imageTag} ."
                    }
                }
            }
        }

        stage('Cleanup Previous Container') {
            steps {
                script {
                    sh 'docker rm -f cms-frontend || true'
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    dir('cms-frontend') {
                        def imageTag = "cms-frontend:${env.BUILD_ID}" // Tagging with build ID
                        echo "Pushing Docker image: ${imageTag} to Docker Hub"
                        withDockerRegistry([credentialsId: "${env.DOCKER_CREDENTIALS_ID}", url: "${env.DOCKER_REGISTRY}"]) {
                            sh "docker tag ${imageTag} ${dockerHubUsername}/${DOCKER_REPO}:${env.BUILD_ID}"
                            sh "docker push ${dockerHubUsername}/${DOCKER_REPO}:${env.BUILD_ID}"
                        }
                    }
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    def imageTag = "cms-frontend:${env.BUILD_ID}" // Tagging with build ID
                    echo "Running Docker container from image: ${imageTag}"
                    sh "docker run -d --name cms-frontend -p 3000:3000 ${dockerHubUsername}/${DOCKER_REPO}:${env.BUILD_ID}"
                }
            }
        }

        stage('Pull Docker Image') {
            steps {
                script {
                    echo "Pulling Docker image: ${dockerHubUsername}/${DOCKER_REPO}:${env.BUILD_ID} from Docker Hub"
                    withDockerRegistry([credentialsId: "${env.DOCKER_CREDENTIALS_ID}", url: "${env.DOCKER_REGISTRY}"]) {
                        sh "docker pull ${dockerHubUsername}/${DOCKER_REPO}:${env.BUILD_ID}"
                    }
                }
            }
        }
    }
}
